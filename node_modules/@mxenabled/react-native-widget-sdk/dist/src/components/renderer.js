import React, { useRef } from "react";
import { SafeAreaView } from "react-native";
import { WebView } from "react-native-webview";
import { Type } from "@mxenabled/widget-post-message-definitions";
import { useSsoUrl } from "../sso";
import { loadUrlInBrowser } from "./load_url_in_browser";
import { makeRequestInterceptor } from "./request_interceptor";
import { useFullscreenStyles } from "./screen_dimensions";
import { postSdkInfoMessage } from "./telemetry";
export function useWidgetRenderer(props, dispatchEvent) {
    const [_ref, elem] = useWidgetRendererWithRef(props, dispatchEvent);
    return elem;
}
export function useWidgetRendererWithRef(props, dispatchEvent) {
    const ref = useRef(null);
    const url = useSsoUrl(props);
    const fullscreenStyles = useFullscreenStyles();
    const style = props.style || fullscreenStyles;
    if (!url) {
        return [ref, <SafeAreaView style={style}/>];
    }
    const scheme = props.uiMessageWebviewUrlScheme || "mx";
    const handler = makeRequestInterceptor(url, scheme, {
        onIntercept: (url) => {
            const event = dispatchEvent(url, props);
            if (event && event.type === Type.Load) {
                postSdkInfoMessage(ref, props);
            }
        },
        onLoadUrlInBrowser: (url) => {
            loadUrlInBrowser(url, props);
        },
    });
    return [
        ref,
        <SafeAreaView testID="widget_view" style={style}>
      <WebView testID="widget_webview" style={props.webViewStyle} ref={ref} scrollEnabled={true} source={{ uri: url }} originWhitelist={["*"]} cacheMode="LOAD_NO_CACHE" javaScriptEnabled={true} domStorageEnabled={true} incognito={true} onShouldStartLoadWithRequest={handler} onError={props.onWebViewError}/>
    </SafeAreaView>,
    ];
}
