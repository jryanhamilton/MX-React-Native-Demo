import { parse as parseUrl } from "url";
export var Action;
(function (Action) {
    Action[Action["LoadInApp"] = 0] = "LoadInApp";
    Action[Action["LoadInBrowser"] = 1] = "LoadInBrowser";
    Action[Action["Intercept"] = 2] = "Intercept";
})(Action || (Action = {}));
class Interceptor {
    widgetUrl;
    uiMessageWebviewUrlScheme;
    constructor(widgetUrl, uiMessageWebviewUrlScheme) {
        this.widgetUrl = widgetUrl;
        this.uiMessageWebviewUrlScheme = uiMessageWebviewUrlScheme;
    }
    action(request) {
        if (request.url === this.widgetUrl) {
            return Action.LoadInApp;
        }
        const { protocol } = parseUrl(request.url);
        /* The `uiMessageWebviewUrlScheme` value will be something like "appscheme"
         * but the `url.protocol` will be "appscheme:", so we slice off the last
         * character so that we can compare them.
         */
        const scheme = (protocol || "").slice(0, -1);
        if (scheme === this.uiMessageWebviewUrlScheme) {
            return Action.Intercept;
        }
        return Action.LoadInBrowser;
    }
}
export function makeRequestInterceptor(widgetUrl, uiMessageWebviewUrlScheme, callbacks) {
    const interceptor = new Interceptor(widgetUrl, uiMessageWebviewUrlScheme);
    return function (request) {
        const action = interceptor.action(request);
        switch (action) {
            case Action.LoadInApp:
                return true;
            case Action.Intercept:
                callbacks.onIntercept?.(request.url);
                return false;
            case Action.LoadInBrowser:
                callbacks.onLoadUrlInBrowser?.(request.url);
                return false;
        }
    };
}
