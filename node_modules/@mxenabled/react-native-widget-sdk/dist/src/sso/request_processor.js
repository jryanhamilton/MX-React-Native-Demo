import base64 from "react-native-base64";
import { isSsoUrlMethodPlatformApi, isSsoUrlMethodProxyServer, } from "./properties";
import { lookupHost } from "./environment";
import { getWidgetConfigurationFromProps } from "./widget_configuration";
import { InvalidSsoUrlPropsError } from "./error";
export function defaultSsoRequestPostprocess(body) {
    return body.widget_url.url;
}
export function defaultSsoRequestBuilder(props) {
    const url = getRequestUrl(props);
    const options = getRequestOptions(props);
    return { url, options };
}
export function defaultSsoRequestPreprocess(opts) {
    return opts;
}
function getRequestUrl(props) {
    if (isSsoUrlMethodProxyServer(props)) {
        return getProxyServerRequestUrl(props);
    }
    else if (isSsoUrlMethodPlatformApi(props)) {
        return getPlatformApiRequestUrl(props);
    }
    throw new InvalidSsoUrlPropsError();
}
function getProxyServerRequestUrl(props) {
    return props.proxy;
}
function getPlatformApiRequestUrl(props) {
    const host = lookupHost(props.environment);
    const userGuid = props.userGuid;
    return `${host}/users/${userGuid}/widget_urls`;
}
function getRequestOptions(props) {
    const headers = {
        Accept: "application/vnd.mx.api.v1+json",
        "Content-Type": "application/json",
    };
    if (props.language) {
        headers["Accept-Language"] = props.language;
    }
    if (isSsoUrlMethodPlatformApi(props)) {
        const { apiKey, clientId } = props;
        const authorization = base64.encode(`${clientId}:${apiKey}`);
        headers["Authorization"] = `Basic ${authorization}`;
    }
    const method = "POST";
    const body = JSON.stringify({
        widget_url: getWidgetConfigurationFromProps(props),
    });
    return { method, headers, body };
}
