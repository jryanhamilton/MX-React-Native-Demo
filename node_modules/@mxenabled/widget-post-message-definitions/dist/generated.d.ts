/**
 * This file is auto-generated by widget-post-message-definitions,
 * DO NOT EDIT.
 *
 * If you need to make changes to the code in this file, you can do so by
 * modifying the definitions found in the widget-post-message-definitions
 * project.
 */
import { BasePostMessageCallbackProps, MessageEventData } from "./lib";
export declare enum Type {
    Load = "mx/load",
    Ping = "mx/ping",
    Navigation = "mx/navigation",
    FocusTrap = "mx/focusTrap",
    ClientOAuthComplete = "mx/client/oauthComplete",
    ConnectLoaded = "mx/connect/loaded",
    ConnectEnterCredentials = "mx/connect/enterCredentials",
    ConnectInstitutionSearch = "mx/connect/institutionSearch",
    ConnectSelectedInstitution = "mx/connect/selectedInstitution",
    ConnectMemberConnected = "mx/connect/memberConnected",
    ConnectConnectedPrimaryAction = "mx/connect/connected/primaryAction",
    ConnectMemberDeleted = "mx/connect/memberDeleted",
    ConnectCreateMemberError = "mx/connect/createMemberError",
    ConnectMemberStatusUpdate = "mx/connect/memberStatusUpdate",
    ConnectOAuthError = "mx/connect/oauthError",
    ConnectOAuthRequested = "mx/connect/oauthRequested",
    ConnectStepChange = "mx/connect/stepChange",
    ConnectSubmitMFA = "mx/connect/submitMFA",
    ConnectUpdateCredentials = "mx/connect/updateCredentials",
    PulseOverdraftWarningCtaTransferFunds = "mx/pulse/overdraftWarning/cta/transferFunds",
    AccountCreated = "mx/account/created"
}
export declare type LoadPayload = {
    type: Type.Load;
};
export declare type PingPayload = {
    type: Type.Ping;
    user_guid: string;
    session_guid: string;
};
export declare type NavigationPayload = {
    type: Type.Navigation;
    user_guid: string;
    session_guid: string;
    did_go_back: boolean;
};
export declare type FocusTrapPayload = {
    type: Type.FocusTrap;
    user_guid: string;
    session_guid: string;
};
export declare type ClientOAuthCompletePayload = {
    type: Type.ClientOAuthComplete;
    url: string;
};
export declare type ConnectLoadedPayload = {
    type: Type.ConnectLoaded;
    user_guid: string;
    session_guid: string;
    initial_step: string;
};
export declare type ConnectEnterCredentialsPayload = {
    type: Type.ConnectEnterCredentials;
    user_guid: string;
    session_guid: string;
    institution: {
        code: string;
        guid: string;
    };
};
export declare type ConnectInstitutionSearchPayload = {
    type: Type.ConnectInstitutionSearch;
    user_guid: string;
    session_guid: string;
    query: string;
};
export declare type ConnectSelectedInstitutionPayload = {
    type: Type.ConnectSelectedInstitution;
    user_guid: string;
    session_guid: string;
    code: string;
    guid: string;
    name: string;
    url: string;
};
export declare type ConnectMemberConnectedPayload = {
    type: Type.ConnectMemberConnected;
    user_guid: string;
    session_guid: string;
    member_guid: string;
};
export declare type ConnectConnectedPrimaryActionPayload = {
    type: Type.ConnectConnectedPrimaryAction;
    user_guid: string;
    session_guid: string;
};
export declare type ConnectMemberDeletedPayload = {
    type: Type.ConnectMemberDeleted;
    user_guid: string;
    session_guid: string;
    member_guid: string;
};
export declare type ConnectCreateMemberErrorPayload = {
    type: Type.ConnectCreateMemberError;
    user_guid: string;
    session_guid: string;
    institution_guid: string;
    institution_code: string;
};
export declare type ConnectMemberStatusUpdatePayload = {
    type: Type.ConnectMemberStatusUpdate;
    user_guid: string;
    session_guid: string;
    member_guid: string;
    connection_status: number;
};
export declare type ConnectOAuthErrorPayload = {
    type: Type.ConnectOAuthError;
    user_guid: string;
    session_guid: string;
    member_guid?: string;
};
export declare type ConnectOAuthRequestedPayload = {
    type: Type.ConnectOAuthRequested;
    user_guid: string;
    session_guid: string;
    url: string;
    member_guid: string;
};
export declare type ConnectStepChangePayload = {
    type: Type.ConnectStepChange;
    user_guid: string;
    session_guid: string;
    previous: string;
    current: string;
};
export declare type ConnectSubmitMFAPayload = {
    type: Type.ConnectSubmitMFA;
    user_guid: string;
    session_guid: string;
    member_guid: string;
};
export declare type ConnectUpdateCredentialsPayload = {
    type: Type.ConnectUpdateCredentials;
    user_guid: string;
    session_guid: string;
    member_guid: string;
    institution: {
        code: string;
        guid: string;
    };
};
export declare type PulseOverdraftWarningCtaTransferFundsPayload = {
    type: Type.PulseOverdraftWarningCtaTransferFunds;
    account_guid: string;
    amount: number;
};
export declare type AccountCreatedPayload = {
    type: Type.AccountCreated;
    guid: string;
};
export declare type WidgetPayload = LoadPayload | PingPayload | NavigationPayload | FocusTrapPayload | ClientOAuthCompletePayload | ConnectLoadedPayload | ConnectEnterCredentialsPayload | ConnectInstitutionSearchPayload | ConnectSelectedInstitutionPayload | ConnectMemberConnectedPayload | ConnectConnectedPrimaryActionPayload | ConnectMemberDeletedPayload | ConnectCreateMemberErrorPayload | ConnectMemberStatusUpdatePayload | ConnectOAuthErrorPayload | ConnectOAuthRequestedPayload | ConnectStepChangePayload | ConnectSubmitMFAPayload | ConnectUpdateCredentialsPayload | PulseOverdraftWarningCtaTransferFundsPayload;
export declare type EntityPayload = AccountCreatedPayload;
export declare type Payload = WidgetPayload | EntityPayload;
export declare type WidgetPostMessageCallbackProps<T> = BasePostMessageCallbackProps<T> & EntityPostMessageCallbackProps & GenericPostMessageCallbackProps;
export declare type EntityPostMessageCallbackProps = {
    onAccountCreated?: (payload: AccountCreatedPayload) => void;
};
export declare type GenericPostMessageCallbackProps = {
    onLoad?: (payload: LoadPayload) => void;
    onPing?: (payload: PingPayload) => void;
    onNavigation?: (payload: NavigationPayload) => void;
    onFocusTrap?: (payload: FocusTrapPayload) => void;
};
export declare type ConnectPostMessageCallbackProps<T> = WidgetPostMessageCallbackProps<T> & {
    onLoaded?: (payload: ConnectLoadedPayload) => void;
    onEnterCredentials?: (payload: ConnectEnterCredentialsPayload) => void;
    onInstitutionSearch?: (payload: ConnectInstitutionSearchPayload) => void;
    onSelectedInstitution?: (payload: ConnectSelectedInstitutionPayload) => void;
    onMemberConnected?: (payload: ConnectMemberConnectedPayload) => void;
    onConnectedPrimaryAction?: (payload: ConnectConnectedPrimaryActionPayload) => void;
    onMemberDeleted?: (payload: ConnectMemberDeletedPayload) => void;
    onCreateMemberError?: (payload: ConnectCreateMemberErrorPayload) => void;
    onMemberStatusUpdate?: (payload: ConnectMemberStatusUpdatePayload) => void;
    onOAuthError?: (payload: ConnectOAuthErrorPayload) => void;
    onOAuthRequested?: (payload: ConnectOAuthRequestedPayload) => void;
    onStepChange?: (payload: ConnectStepChangePayload) => void;
    onSubmitMFA?: (payload: ConnectSubmitMFAPayload) => void;
    onUpdateCredentials?: (payload: ConnectUpdateCredentialsPayload) => void;
};
export declare type PulsePostMessageCallbackProps<T> = WidgetPostMessageCallbackProps<T> & {
    onOverdraftWarningCtaTransferFunds?: (payload: PulseOverdraftWarningCtaTransferFundsPayload) => void;
};
/**
 * Dispatch a post message event that we got from a url change event for any
 * widget. Does not handle widget specific post messages. See other dispatch
 * methods for widget specific dispatching.
 */
export declare function dispatchWidgetLocationChangeEvent(url: string, callbacks: WidgetPostMessageCallbackProps<string>): Payload | undefined;
/**
 * Dispatch a post message event that we got from a message event for any
 * widget. Does not handle widget specific post messages. See other dispatch
 * methods for widget specific dispatching.
 */
export declare function dispatchWidgetPostMessageEvent(event: MessageEvent<MessageEventData>, callbacks: WidgetPostMessageCallbackProps<MessageEvent<MessageEventData>>): Payload | undefined;
/**
 * Dispatch a post message event that we got from a url change event for the
 * Connect Widget.
 */
export declare function dispatchConnectLocationChangeEvent(url: string, callbacks: ConnectPostMessageCallbackProps<string>): Payload | undefined;
/**
 * Dispatch a post message event that we got from a window/document message for the
 * Connect Widget.
 */
export declare function dispatchConnectPostMessageEvent(event: MessageEvent<MessageEventData>, callbacks: ConnectPostMessageCallbackProps<MessageEvent<MessageEventData>>): Payload | undefined;
/**
 * Dispatch a post message event that we got from a url change event for the
 * Pulse Widget.
 */
export declare function dispatchPulseLocationChangeEvent(url: string, callbacks: PulsePostMessageCallbackProps<string>): Payload | undefined;
/**
 * Dispatch a post message event that we got from a window/document message for the
 * Pulse Widget.
 */
export declare function dispatchPulsePostMessageEvent(event: MessageEvent<MessageEventData>, callbacks: PulsePostMessageCallbackProps<MessageEvent<MessageEventData>>): Payload | undefined;
