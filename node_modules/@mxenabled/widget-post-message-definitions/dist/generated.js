/**
 * This file is auto-generated by widget-post-message-definitions,
 * DO NOT EDIT.
 *
 * If you need to make changes to the code in this file, you can do so by
 * modifying the definitions found in the widget-post-message-definitions
 * project.
 */
import { PostMessageFieldDecodeError, PostMessageUnknownTypeError, assertMessageProp, } from "./lib";
export var Type;
(function (Type) {
    Type["Load"] = "mx/load";
    Type["Ping"] = "mx/ping";
    Type["Navigation"] = "mx/navigation";
    Type["FocusTrap"] = "mx/focusTrap";
    Type["ClientOAuthComplete"] = "mx/client/oauthComplete";
    Type["ConnectLoaded"] = "mx/connect/loaded";
    Type["ConnectEnterCredentials"] = "mx/connect/enterCredentials";
    Type["ConnectInstitutionSearch"] = "mx/connect/institutionSearch";
    Type["ConnectSelectedInstitution"] = "mx/connect/selectedInstitution";
    Type["ConnectMemberConnected"] = "mx/connect/memberConnected";
    Type["ConnectConnectedPrimaryAction"] = "mx/connect/connected/primaryAction";
    Type["ConnectMemberDeleted"] = "mx/connect/memberDeleted";
    Type["ConnectCreateMemberError"] = "mx/connect/createMemberError";
    Type["ConnectMemberStatusUpdate"] = "mx/connect/memberStatusUpdate";
    Type["ConnectOAuthError"] = "mx/connect/oauthError";
    Type["ConnectOAuthRequested"] = "mx/connect/oauthRequested";
    Type["ConnectStepChange"] = "mx/connect/stepChange";
    Type["ConnectSubmitMFA"] = "mx/connect/submitMFA";
    Type["ConnectUpdateCredentials"] = "mx/connect/updateCredentials";
    Type["PulseOverdraftWarningCtaTransferFunds"] = "mx/pulse/overdraftWarning/cta/transferFunds";
    Type["AccountCreated"] = "mx/account/created";
})(Type || (Type = {}));
const typeLookup = {
    [Type.Load]: Type.Load,
    [Type.Ping]: Type.Ping,
    [Type.Navigation]: Type.Navigation,
    [Type.FocusTrap]: Type.FocusTrap,
    "mx/focustrap": Type.FocusTrap,
    [Type.ClientOAuthComplete]: Type.ClientOAuthComplete,
    "mx/client/oauthcomplete": Type.ClientOAuthComplete,
    [Type.ConnectLoaded]: Type.ConnectLoaded,
    [Type.ConnectEnterCredentials]: Type.ConnectEnterCredentials,
    "mx/connect/entercredentials": Type.ConnectEnterCredentials,
    [Type.ConnectInstitutionSearch]: Type.ConnectInstitutionSearch,
    "mx/connect/institutionsearch": Type.ConnectInstitutionSearch,
    [Type.ConnectSelectedInstitution]: Type.ConnectSelectedInstitution,
    "mx/connect/selectedinstitution": Type.ConnectSelectedInstitution,
    [Type.ConnectMemberConnected]: Type.ConnectMemberConnected,
    "mx/connect/memberconnected": Type.ConnectMemberConnected,
    [Type.ConnectConnectedPrimaryAction]: Type.ConnectConnectedPrimaryAction,
    "mx/connect/connected/primaryaction": Type.ConnectConnectedPrimaryAction,
    [Type.ConnectMemberDeleted]: Type.ConnectMemberDeleted,
    "mx/connect/memberdeleted": Type.ConnectMemberDeleted,
    [Type.ConnectCreateMemberError]: Type.ConnectCreateMemberError,
    "mx/connect/createmembererror": Type.ConnectCreateMemberError,
    [Type.ConnectMemberStatusUpdate]: Type.ConnectMemberStatusUpdate,
    "mx/connect/memberstatusupdate": Type.ConnectMemberStatusUpdate,
    [Type.ConnectOAuthError]: Type.ConnectOAuthError,
    "mx/connect/oautherror": Type.ConnectOAuthError,
    [Type.ConnectOAuthRequested]: Type.ConnectOAuthRequested,
    "mx/connect/oauthrequested": Type.ConnectOAuthRequested,
    [Type.ConnectStepChange]: Type.ConnectStepChange,
    "mx/connect/stepchange": Type.ConnectStepChange,
    [Type.ConnectSubmitMFA]: Type.ConnectSubmitMFA,
    "mx/connect/submitmfa": Type.ConnectSubmitMFA,
    [Type.ConnectUpdateCredentials]: Type.ConnectUpdateCredentials,
    "mx/connect/updatecredentials": Type.ConnectUpdateCredentials,
    [Type.PulseOverdraftWarningCtaTransferFunds]: Type.PulseOverdraftWarningCtaTransferFunds,
    "mx/pulse/overdraftwarning/cta/transferfunds": Type.PulseOverdraftWarningCtaTransferFunds,
    [Type.AccountCreated]: Type.AccountCreated,
};
/**
 * Given a post message type (eg, "mx/load", "mx/connect/memberConnected") and
 * the payload for that message, this function parses the payload object and
 * returns a validated and typed object.
 *
 * @throws {PostMessageUnknownTypeError}
 * @throws {PostMessageFieldDecodeError}
 */
function buildPayload(type, metadata) {
    switch (type) {
        case Type.Load:
            return {
                type,
            };
        case Type.Ping:
            assertMessageProp(metadata, "mx/ping", "user_guid", "string");
            assertMessageProp(metadata, "mx/ping", "session_guid", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
            };
        case Type.Navigation:
            assertMessageProp(metadata, "mx/navigation", "user_guid", "string");
            assertMessageProp(metadata, "mx/navigation", "session_guid", "string");
            assertMessageProp(metadata, "mx/navigation", "did_go_back", "boolean");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                did_go_back: metadata.did_go_back,
            };
        case Type.FocusTrap:
            assertMessageProp(metadata, "mx/focusTrap", "user_guid", "string");
            assertMessageProp(metadata, "mx/focusTrap", "session_guid", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
            };
        case Type.ClientOAuthComplete:
            assertMessageProp(metadata, "mx/client/oauthComplete", "url", "string");
            return {
                type,
                url: metadata.url,
            };
        case Type.ConnectLoaded:
            assertMessageProp(metadata, "mx/connect/loaded", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/loaded", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/loaded", "initial_step", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                initial_step: metadata.initial_step,
            };
        case Type.ConnectEnterCredentials:
            assertMessageProp(metadata, "mx/connect/enterCredentials", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/enterCredentials", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/enterCredentials", "institution", { code: "string", guid: "string" });
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                institution: metadata.institution,
            };
        case Type.ConnectInstitutionSearch:
            assertMessageProp(metadata, "mx/connect/institutionSearch", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/institutionSearch", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/institutionSearch", "query", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                query: metadata.query,
            };
        case Type.ConnectSelectedInstitution:
            assertMessageProp(metadata, "mx/connect/selectedInstitution", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/selectedInstitution", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/selectedInstitution", "code", "string");
            assertMessageProp(metadata, "mx/connect/selectedInstitution", "guid", "string");
            assertMessageProp(metadata, "mx/connect/selectedInstitution", "name", "string");
            assertMessageProp(metadata, "mx/connect/selectedInstitution", "url", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                code: metadata.code,
                guid: metadata.guid,
                name: metadata.name,
                url: metadata.url,
            };
        case Type.ConnectMemberConnected:
            assertMessageProp(metadata, "mx/connect/memberConnected", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/memberConnected", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/memberConnected", "member_guid", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                member_guid: metadata.member_guid,
            };
        case Type.ConnectConnectedPrimaryAction:
            assertMessageProp(metadata, "mx/connect/connected/primaryAction", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/connected/primaryAction", "session_guid", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
            };
        case Type.ConnectMemberDeleted:
            assertMessageProp(metadata, "mx/connect/memberDeleted", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/memberDeleted", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/memberDeleted", "member_guid", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                member_guid: metadata.member_guid,
            };
        case Type.ConnectCreateMemberError:
            assertMessageProp(metadata, "mx/connect/createMemberError", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/createMemberError", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/createMemberError", "institution_guid", "string");
            assertMessageProp(metadata, "mx/connect/createMemberError", "institution_code", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                institution_guid: metadata.institution_guid,
                institution_code: metadata.institution_code,
            };
        case Type.ConnectMemberStatusUpdate:
            assertMessageProp(metadata, "mx/connect/memberStatusUpdate", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/memberStatusUpdate", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/memberStatusUpdate", "member_guid", "string");
            assertMessageProp(metadata, "mx/connect/memberStatusUpdate", "connection_status", "number");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                member_guid: metadata.member_guid,
                connection_status: metadata.connection_status,
            };
        case Type.ConnectOAuthError:
            assertMessageProp(metadata, "mx/connect/oauthError", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/oauthError", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/oauthError", "member_guid", "string", {
                optional: true,
            });
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                member_guid: metadata.member_guid,
            };
        case Type.ConnectOAuthRequested:
            assertMessageProp(metadata, "mx/connect/oauthRequested", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/oauthRequested", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/oauthRequested", "url", "string");
            assertMessageProp(metadata, "mx/connect/oauthRequested", "member_guid", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                url: metadata.url,
                member_guid: metadata.member_guid,
            };
        case Type.ConnectStepChange:
            assertMessageProp(metadata, "mx/connect/stepChange", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/stepChange", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/stepChange", "previous", "string");
            assertMessageProp(metadata, "mx/connect/stepChange", "current", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                previous: metadata.previous,
                current: metadata.current,
            };
        case Type.ConnectSubmitMFA:
            assertMessageProp(metadata, "mx/connect/submitMFA", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/submitMFA", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/submitMFA", "member_guid", "string");
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                member_guid: metadata.member_guid,
            };
        case Type.ConnectUpdateCredentials:
            assertMessageProp(metadata, "mx/connect/updateCredentials", "user_guid", "string");
            assertMessageProp(metadata, "mx/connect/updateCredentials", "session_guid", "string");
            assertMessageProp(metadata, "mx/connect/updateCredentials", "member_guid", "string");
            assertMessageProp(metadata, "mx/connect/updateCredentials", "institution", { code: "string", guid: "string" });
            return {
                type,
                user_guid: metadata.user_guid,
                session_guid: metadata.session_guid,
                member_guid: metadata.member_guid,
                institution: metadata.institution,
            };
        case Type.PulseOverdraftWarningCtaTransferFunds:
            assertMessageProp(metadata, "mx/pulse/overdraftWarning/cta/transferFunds", "account_guid", "string");
            assertMessageProp(metadata, "mx/pulse/overdraftWarning/cta/transferFunds", "amount", "number");
            return {
                type,
                account_guid: metadata.account_guid,
                amount: metadata.amount,
            };
        case Type.AccountCreated:
            assertMessageProp(metadata, "mx/account/created", "guid", "string");
            return {
                type,
                guid: metadata.guid,
            };
        default:
            throw new PostMessageUnknownTypeError(type);
    }
}
/**
 * @see {buildPayload}
 */
function buildPayloadFromUrl(url) {
    const { parse } = require("url");
    const urlObj = parse(url, true);
    const namespace = urlObj.host || "";
    const action = (urlObj.pathname || "").substring(1);
    const rawType = action ? `mx/${namespace}/${action}` : `mx/${namespace}`;
    let type;
    if (rawType in typeLookup) {
        type = typeLookup[rawType];
    }
    else {
        throw new PostMessageUnknownTypeError(rawType);
    }
    const rawMetadataParam = urlObj.query?.["metadata"] || "{}";
    const rawMetadataString = Array.isArray(rawMetadataParam) ?
        rawMetadataParam.join("") :
        rawMetadataParam;
    const metadata = JSON.parse(rawMetadataString);
    const payload = buildPayload(type, metadata);
    return payload;
}
/**
 * @see {buildPayload}
 */
function buildPayloadFromPostMessageEventData(data) {
    const rawType = data.type || "type not provided";
    let type;
    if (rawType && rawType in typeLookup) {
        type = typeLookup[rawType];
    }
    else {
        throw new PostMessageUnknownTypeError(rawType);
    }
    const metadata = data.metadata || {};
    const payload = buildPayload(type, metadata);
    return payload;
}
/**
 * Called if we encounter an error while parsing or dispatching a post message
 * event. Internal errors are dispatched to the appropriate error callback, and
 * everything else is thrown so it can be handled in the host application since
 * it's likely an application/user-level error.
 */
function dispatchError(message, error, callbacks) {
    if (error instanceof PostMessageFieldDecodeError) {
        callbacks.onInvalidMessageError?.(message, error);
    }
    else if (error instanceof PostMessageUnknownTypeError) {
        callbacks.onInvalidMessageError?.(message, error);
    }
    else {
        throw error;
    }
}
/**
 * We dispatch all messages to the onMessage callback.
 */
function dispatchOnMessage(message, callbacks) {
    callbacks.onMessage?.(message);
}
/**
 * Dispatch a post message event that we got from a url change event for any
 * widget. Does not handle widget specific post messages. See other dispatch
 * methods for widget specific dispatching.
 */
export function dispatchWidgetLocationChangeEvent(url, callbacks) {
    let payload;
    try {
        dispatchOnMessage(url, callbacks);
        payload = buildPayloadFromUrl(url);
        dispatchWidgetInternalMessage(payload, callbacks);
    }
    catch (error) {
        dispatchError(url, error, callbacks);
    }
    return payload;
}
/**
 * Dispatch a post message event that we got from a message event for any
 * widget. Does not handle widget specific post messages. See other dispatch
 * methods for widget specific dispatching.
 */
export function dispatchWidgetPostMessageEvent(event, callbacks) {
    let payload;
    try {
        dispatchOnMessage(event, callbacks);
        payload = buildPayloadFromPostMessageEventData(event.data);
        dispatchWidgetInternalMessage(payload, callbacks);
    }
    catch (error) {
        dispatchError(event, error, callbacks);
    }
    return payload;
}
/**
 * Dispatch a validated internal message for any widget.
 */
function dispatchWidgetInternalMessage(payload, callbacks) {
    switch (payload.type) {
        case Type.Load:
            callbacks.onLoad?.(payload);
            break;
        case Type.Ping:
            callbacks.onPing?.(payload);
            break;
        case Type.Navigation:
            callbacks.onNavigation?.(payload);
            break;
        case Type.FocusTrap:
            callbacks.onFocusTrap?.(payload);
            break;
        case Type.AccountCreated:
            callbacks.onAccountCreated?.(payload);
            break;
        default:
            throw new PostMessageUnknownTypeError(payload.type);
    }
}
/**
 * Dispatch a post message event that we got from a url change event for the
 * Connect Widget.
 */
export function dispatchConnectLocationChangeEvent(url, callbacks) {
    let payload;
    try {
        dispatchOnMessage(url, callbacks);
        payload = buildPayloadFromUrl(url);
        dispatchConnectInternalMessage(payload, callbacks);
    }
    catch (error) {
        dispatchError(url, error, callbacks);
    }
    return payload;
}
/**
 * Dispatch a post message event that we got from a window/document message for the
 * Connect Widget.
 */
export function dispatchConnectPostMessageEvent(event, callbacks) {
    let payload;
    try {
        dispatchOnMessage(event, callbacks);
        payload = buildPayloadFromPostMessageEventData(event.data);
        dispatchConnectInternalMessage(payload, callbacks);
    }
    catch (error) {
        dispatchError(event, error, callbacks);
    }
    return payload;
}
/**
 * Dispatch a validated internal message for the Connect Widget.
 */
function dispatchConnectInternalMessage(payload, callbacks) {
    switch (payload.type) {
        case Type.Load:
            callbacks.onLoad?.(payload);
            break;
        case Type.Ping:
            callbacks.onPing?.(payload);
            break;
        case Type.Navigation:
            callbacks.onNavigation?.(payload);
            break;
        case Type.FocusTrap:
            callbacks.onFocusTrap?.(payload);
            break;
        case Type.AccountCreated:
            callbacks.onAccountCreated?.(payload);
            break;
        case Type.ConnectLoaded:
            callbacks.onLoaded?.(payload);
            break;
        case Type.ConnectEnterCredentials:
            callbacks.onEnterCredentials?.(payload);
            break;
        case Type.ConnectInstitutionSearch:
            callbacks.onInstitutionSearch?.(payload);
            break;
        case Type.ConnectSelectedInstitution:
            callbacks.onSelectedInstitution?.(payload);
            break;
        case Type.ConnectMemberConnected:
            callbacks.onMemberConnected?.(payload);
            break;
        case Type.ConnectConnectedPrimaryAction:
            callbacks.onConnectedPrimaryAction?.(payload);
            break;
        case Type.ConnectMemberDeleted:
            callbacks.onMemberDeleted?.(payload);
            break;
        case Type.ConnectCreateMemberError:
            callbacks.onCreateMemberError?.(payload);
            break;
        case Type.ConnectMemberStatusUpdate:
            callbacks.onMemberStatusUpdate?.(payload);
            break;
        case Type.ConnectOAuthError:
            callbacks.onOAuthError?.(payload);
            break;
        case Type.ConnectOAuthRequested:
            callbacks.onOAuthRequested?.(payload);
            break;
        case Type.ConnectStepChange:
            callbacks.onStepChange?.(payload);
            break;
        case Type.ConnectSubmitMFA:
            callbacks.onSubmitMFA?.(payload);
            break;
        case Type.ConnectUpdateCredentials:
            callbacks.onUpdateCredentials?.(payload);
            break;
        default:
            throw new PostMessageUnknownTypeError(payload.type);
    }
}
/**
 * Dispatch a post message event that we got from a url change event for the
 * Pulse Widget.
 */
export function dispatchPulseLocationChangeEvent(url, callbacks) {
    let payload;
    try {
        dispatchOnMessage(url, callbacks);
        payload = buildPayloadFromUrl(url);
        dispatchPulseInternalMessage(payload, callbacks);
    }
    catch (error) {
        dispatchError(url, error, callbacks);
    }
    return payload;
}
/**
 * Dispatch a post message event that we got from a window/document message for the
 * Pulse Widget.
 */
export function dispatchPulsePostMessageEvent(event, callbacks) {
    let payload;
    try {
        dispatchOnMessage(event, callbacks);
        payload = buildPayloadFromPostMessageEventData(event.data);
        dispatchPulseInternalMessage(payload, callbacks);
    }
    catch (error) {
        dispatchError(event, error, callbacks);
    }
    return payload;
}
/**
 * Dispatch a validated internal message for the Pulse Widget.
 */
function dispatchPulseInternalMessage(payload, callbacks) {
    switch (payload.type) {
        case Type.Load:
            callbacks.onLoad?.(payload);
            break;
        case Type.Ping:
            callbacks.onPing?.(payload);
            break;
        case Type.Navigation:
            callbacks.onNavigation?.(payload);
            break;
        case Type.FocusTrap:
            callbacks.onFocusTrap?.(payload);
            break;
        case Type.AccountCreated:
            callbacks.onAccountCreated?.(payload);
            break;
        case Type.PulseOverdraftWarningCtaTransferFunds:
            callbacks.onOverdraftWarningCtaTransferFunds?.(payload);
            break;
        default:
            throw new PostMessageUnknownTypeError(payload.type);
    }
}
