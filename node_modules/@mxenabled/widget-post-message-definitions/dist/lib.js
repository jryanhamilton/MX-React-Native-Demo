// This is an internal error. Thrown when we are decoding a post message's
// metadata and we encountered a missing field or an invalid value. This
// likely means there has been a change to the definition of a post message
// that we do not know about.
export class PostMessageFieldDecodeError extends Error {
    messageType;
    field;
    expectedType;
    gotValue;
    constructor(messageType, field, expectedType, gotValue) {
        super(`Unable to decode '${field}' from '${messageType}'`);
        this.messageType = messageType;
        this.field = field;
        this.expectedType = expectedType;
        this.gotValue = gotValue;
        Object.setPrototypeOf(this, PostMessageFieldDecodeError.prototype);
    }
}
// This is an internal error. Thrown when we get a post message we don't know
// about. This likely means there is a new post message that this package needs
// to define.
export class PostMessageUnknownTypeError extends Error {
    postMessageType;
    constructor(postMessageType) {
        super(`Unknown post message: ${postMessageType}`);
        this.postMessageType = postMessageType;
        Object.setPrototypeOf(this, PostMessageUnknownTypeError.prototype);
    }
}
export function assertMessageProp(container, postMessageType, field, expectedType, properties = {}) {
    const value = container[field];
    const valueIsDefined = typeof value !== "undefined";
    const valueIsString = typeof value === "string";
    const valueIsNumber = typeof value === "number";
    const valueIsObject = typeof value === "object" && !Array.isArray(value);
    const valueIsBoolean = typeof value === "boolean";
    const typeIsString = expectedType === "string";
    const typeIsNumber = expectedType === "number";
    const typeIsArray = expectedType instanceof Array;
    const typeIsObject = typeof expectedType === "object" && !Array.isArray(expectedType);
    const typeIsBoolean = expectedType === "boolean";
    if (!valueIsDefined && properties.optional) {
        return;
    }
    else if (!valueIsDefined) {
        throw new PostMessageFieldDecodeError(postMessageType, field, expectedType, value);
    }
    else if (typeIsString && !valueIsString) {
        throw new PostMessageFieldDecodeError(postMessageType, field, expectedType, value);
    }
    else if (typeIsNumber && !valueIsNumber) {
        throw new PostMessageFieldDecodeError(postMessageType, field, expectedType, value);
    }
    else if (typeIsArray && !(valueIsString && expectedType.includes(value))) {
        throw new PostMessageFieldDecodeError(postMessageType, field, expectedType, value);
    }
    else if (typeIsObject && !valueIsObject) {
        throw new PostMessageFieldDecodeError(postMessageType, field, expectedType, value);
    }
    else if (typeIsBoolean && !valueIsBoolean) {
        throw new PostMessageFieldDecodeError(postMessageType, field, expectedType, value);
    }
    else if (typeIsObject && valueIsObject) {
        Object.keys(expectedType).forEach((field) => {
            assertMessageProp(value, postMessageType, field, expectedType[field]);
        });
    }
}
